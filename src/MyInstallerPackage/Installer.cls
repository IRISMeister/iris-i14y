Class MyInstallerPackage.Installer
{

XData setup [ XMLNamespace = INSTALLER ]
{
<Manifest>
<Var Name="DataBaseDir" Value="/home/irisowner/database/"/> 
<Var Name="ProductionName" Value="Demo.Production"/>

<If Condition='(##class(Config.Namespaces).Exists("${NAMESPACE}")=0)'>
	<Namespace Name="${NAMESPACE}" Create="overwrite" Code="${NAMESPACE}" Data="${NAMESPACE}">
		<Configuration>
		<Database Name="${NAMESPACE}" Create="overwrite" Dir="${DataBaseDir}${NAMESPACE}" InitialSize="1"/>
		</Configuration>
	</Namespace>
</If>
<Namespace Name="${NAMESPACE}" Create="no">
	<Invoke Class="%SYSTEM.OBJ" Method="ImportDir" CheckStatus="true">
		<Arg Value="${SRCDIR}" />
		<Arg Value="" />
		<Arg Value="ck" />
		<Arg Value=".e" />
		<Arg Value="1" />
	</Invoke>
	<Production Name="${ProductionName}" AutoStart="1">
	<Credential Name="ftp" Username="foo" Password="pass" Overwrite="1"/>
	<Credential Name="smtp" Username="foo" Password="pass" Overwrite="1"/>
	<Credential Name="rest" Username="SuperUser" Password="SYS" Overwrite="1"/>
	<Credential Name="mail-yahoo" Username="test" Password="test" Overwrite="1"/>
	<Credential Name="mail-gmail" Username="test" Password="test" Overwrite="1"/>
	</Production>
</Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setupMethod(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
    #; Let our XGL document generate code for this method. 
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, 
    %code, "setup")
}

ClassMethod setup(ByRef tVars) As %Status
{
  Set tSC='$$$OK
  Try {
		If '$D(tVars("SRCDIR")) { Set tVars("SRCDIR")="/home/irisowner/src" }
		If '$D(tVars("NAMESPACE")) { Set tVars("NAMESPACE")="demo" }
		$$$THROWONERROR(tSC,..setupMethod(.tVars))

		; Add SQL Gateway connection for JDBC access to postgresql
		New $NAMESPACE
		Set $NAMESPACE="%SYS"
		Set p=##class(%Library.SQLConnection).%New()
		Set p.Name = "postgresqljdbc"
		Set p.URL = "jdbc:postgresql://postgres:5432/demo"
		Set p.Usr = "postgres"
		Set p.classpath = "/home/irisowner/postgresql-42.2.11.jar"
		Set p.driver = "org.postgresql.Driver"
		Set p.isJDBC = 1
		Set p.pwd = "postgres"
		Set tSC=p.%Save()
		$$$ThrowOnError(tSC)

		; Add SQL Gateway connection for JDBC access to oracle
		Set p=##class(%Library.SQLConnection).%New()
		Set p.Name = "oraclejdbc"
		Set p.URL = "jdbc:oracle:thin:@//oracle:1521/ORCLPDB1"
		Set p.Usr = "demo"
		Set p.classpath = "/home/irisowner/ojdbc8.jar"
		Set p.driver = "oracle.jdbc.OracleDriver"
		Set p.isJDBC = 1
		Set p.pwd = "demo"
		Set tSC=p.%Save()
		$$$ThrowOnError(tSC)

		; Add SQL Gateway connection for JDBC access to mysql
		Set p=##class(%Library.SQLConnection).%New()
		Set p.Name = "mysqljdbc"
		Set p.URL = "jdbc:mysql://mysql/demo"
		Set p.Usr = "demo"
		Set p.classpath = "/home/irisowner/mysql-connector-java-5.1.48/mysql-connector-java-5.1.48-bin.jar"
		Set p.driver = "com.mysql.jdbc.Driver"
		Set p.isJDBC = 1
		Set p.pwd = "demo"
		Set tSC=p.%Save()
		$$$ThrowOnError(tSC)

		; Create a New REST App for EnsLib.REST.GenericService(RESTPassThrough)
		Kill prop
		Set prop("NameSpace")="DEMO"
		Set prop("DispatchClass")="EnsLib.REST.GenericService"
		Set prop("AutheEnabled")=$$$AutheUnauthenticated
		Set prop("MatchRoles")=":%All"
		Set tSC = ##Class(Security.Applications).Create("/csp/demo/restpassthrough",.prop)		

		; Create a New REST App
		Kill prop
		Set prop("NameSpace")="DEMO"
		Set prop("DispatchClass")="Demo.Rest.Dispatcher"
		Set prop("AutheEnabled")=$$$AutheUnauthenticated
		Set prop("MatchRoles")=":%All"
		Set tSC = ##Class(Security.Applications).Create("/csp/demo/rest",.prop)		

		;DEV/DEBUG Purrpose Only. Make enslib R/W
		Set db=##class(SYS.Database).%OpenId("/usr/irissys/mgr/enslib"),db.ReadOnly=0,tSC=db.%Save()

		Set $NAMESPACE=tVars("NAMESPACE")
		Set tsC=##class(EnsLib.EDI.XML.SchemaXSD).ImportFiles("/home/irisowner/resources/order.xsd")
		$$$ThrowOnError(tSC)
		Set tsC=##class(EnsLib.EDI.XML.SchemaXSD).ImportFiles("/home/irisowner/resources/person.xsd")
		$$$ThrowOnError(tSC)

		;DEV/DEBUG Purrpose Only. Force compile some enslib classes.
		Do $SYSTEM.OBJ.Compile("Ens.Queue","ck-u")
		Do $SYSTEM.OBJ.Compile("Ens.BusinessService","ck-u")
		Do $SYSTEM.OBJ.Compile("EnsLib.EMail.InboundAdapter","ck-u")

  } Catch(e) {
	  zw e
	  Set tSC=e.AsStatus()
  }
  Return tSC
}

}
