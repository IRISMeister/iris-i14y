Class MyInstallerPackage.Installer
{

XData setup [ XMLNamespace = INSTALLER ]
{
<Manifest>
<Var Name="DataBaseDir" Value="/home/irisowner/database/"/> 
<Var Name="ProductionName" Value="Demo.Production"/>

<Namespace Name="demo" Create="overwrite" Code="demo" Data="demo">
	<Configuration>
	<Database Name="demo" Create="overwrite" Dir="${DataBaseDir}demo" InitialSize="1"/>
	</Configuration>
	<Invoke Class="%SYSTEM.OBJ" Method="ImportDir" CheckStatus="true">
		<Arg Value="${SRCDIR}" />
		<Arg Value="" />
		<Arg Value="ck" />
		<Arg Value=".e" />
		<Arg Value="1" />
	</Invoke>
	<Production Name="${ProductionName}" AutoStart="1">
	<Credential Name="ftp" Username="foo" Password="pass" Overwrite="0"/>
	</Production>
</Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setupMethod(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
    #; Let our XGL document generate code for this method. 
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, 
    %code, "setup")
}

ClassMethod setup(ByRef tVars) As %Status
{
  Set tSC='$$$OK
  Try {
		If '$D(tVars("SRCDIR")) { Set tVars("SRCDIR")="/home/irisowner/src" }
		$$$THROWONERROR(tSC,..setupMethod(.tVars))
  } Catch(e) {
	  Set tSC=e.AsStatus()
  }
  Return tSC
}

}
